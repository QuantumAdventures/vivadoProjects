library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use std.textio.all;

-- entity
entity integrator_TB is
end integrator_TB;

architecture behav of integrator_TB is

signal clk_i    : std_logic;
signal input_i  : std_logic_vector(13 downto 0);
signal windows  : std_logic_vector(9 downto 0)  := "0000000000";
signal gain     : std_logic_vector(31 downto 0) := "00000010000000000000000000000000";
signal output_o : std_logic_vector(13 downto 0);

type memory is array (0 to 100) of std_logic_vector(13 downto 0);
signal ROM : memory;
signal state : integer := 0;
	
begin

	integrator: entity work.integrator
    port map( clk_i => clk_i, input_i => input_i, windows => windows, gain => gain,output_o => output_o);


	clock_gen: process
	file test_vector      : text open write_mode is "test.txt";
	variable row          : line;
	variable count : integer := 0;
	begin
	
		if (state = 0) then
			wait for 1 ns;  
			state <= 1;
		    windows <= "0000000100";
			ROM(0) <= "00100000000000";
			ROM(1) <= "00011111010110";
			ROM(2) <= "00011101011011";
			ROM(3) <= "00011010010011";
			ROM(4) <= "00010110000110";
			ROM(5) <= "00010001000001";
			ROM(6) <= "00001011001110";
			ROM(7) <= "00000100111111";
			ROM(8) <= "11111110100100";
			ROM(9) <= "11111000001011";
			ROM(10) <= "11110010000111";
			ROM(11) <= "11101100100111";
			ROM(12) <= "11100111111001";
			ROM(13) <= "11100100001010";
			ROM(14) <= "11100001100100";
			ROM(15) <= "11100000001101";
			ROM(16) <= "11100000001001";
			ROM(17) <= "11100001011000";
			ROM(18) <= "11100011110110";
			ROM(19) <= "11100111011110";
			ROM(20) <= "11101100000110";
			ROM(21) <= "11110001100001";
			ROM(22) <= "11110111100010";
			ROM(23) <= "11111101111010";
			ROM(24) <= "00000100010101";
			ROM(25) <= "00001010100111";
			ROM(26) <= "00010000011101";
			ROM(27) <= "00010101101000";
			ROM(28) <= "00011001111010";
			ROM(29) <= "00011101001010";
			ROM(30) <= "00011111001101";
			ROM(31) <= "00011111111111";
			ROM(32) <= "00011111011110";
			ROM(33) <= "00011101101011";
			ROM(34) <= "00011010101010";
			ROM(35) <= "00010110100101";
			ROM(36) <= "00010001100100";
			ROM(37) <= "00001011110110";
			ROM(38) <= "00000101101001";
			ROM(39) <= "11111111001110";
			ROM(40) <= "11111000110100";
			ROM(41) <= "11110010101101";
			ROM(42) <= "11101101001000";
			ROM(43) <= "11101000010101";
			ROM(44) <= "11100100100000";
			ROM(45) <= "11100001110010";
			ROM(46) <= "11100000010010";
			ROM(47) <= "11100000000110";
			ROM(48) <= "11100001001100";
			ROM(49) <= "11100011100010";
			ROM(50) <= "11100111000011";
			ROM(51) <= "11101011100101";
			ROM(52) <= "11110000111100";
			ROM(53) <= "11110110111010";
			ROM(54) <= "11111101010000";
			ROM(55) <= "00000011101100";
			ROM(56) <= "00001001111111";
			ROM(57) <= "00001111111000";
			ROM(58) <= "00010101001000";
			ROM(59) <= "00011001100001";
			ROM(60) <= "00011100111000";
			ROM(61) <= "00011111000011";
			ROM(62) <= "00011111111110";
			ROM(63) <= "00011111100101";
			ROM(64) <= "00011101111010";
			ROM(65) <= "00011011000001";
			ROM(66) <= "00010111000010";
			ROM(67) <= "00010010000111";
			ROM(68) <= "00001100011101";
			ROM(69) <= "00000110010010";
			ROM(70) <= "11111111111000";
			ROM(71) <= "11111001011101";
			ROM(72) <= "11110011010011";
			ROM(73) <= "11101101101011";
			ROM(74) <= "11101000110010";
			ROM(75) <= "11100100110101";
			ROM(76) <= "11100010000000";
			ROM(77) <= "11100000011000";
			ROM(78) <= "11100000000011";
			ROM(79) <= "11100001000001";
			ROM(80) <= "11100011010000";
			ROM(81) <= "11100110101001";
			ROM(82) <= "11101011000101";
			ROM(83) <= "11110000010111";
			ROM(84) <= "11110110010010";
			ROM(85) <= "11111100100110";
			ROM(86) <= "00000011000010";
			ROM(87) <= "00001001010111";
			ROM(88) <= "00001111010100";
			ROM(89) <= "00010100101000";
			ROM(90) <= "00011001001000";
			ROM(91) <= "00011100100101";
			ROM(92) <= "00011110111001";
			ROM(93) <= "00011111111100";
			ROM(94) <= "00011111101011";
			ROM(95) <= "00011110001001";
			ROM(96) <= "00011011010111";
			ROM(97) <= "00010111011111";
			ROM(98) <= "00010010101001";
			ROM(99) <= "00001101000011";
		else
			input_i <= ROM(count);
			count := (count + 1) mod 100;
			clk_i <= '1';
			wait for 1 ns;
			clk_i <= '0';
			wait for 1 ns;
		end if;
	
	end process;
	
    
end behav;