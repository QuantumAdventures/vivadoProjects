library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- entity
entity ROM_fValues is
	port     (clk_i           : in  std_logic;
			  address_0       : in  std_logic_vector(6 downto 0);
			  address_1       : in  std_logic_vector(6 downto 0);
			  address_2       : in  std_logic_vector(6 downto 0);
			  address_3       : in  std_logic_vector(6 downto 0);
			  readOut_0       : out std_logic_vector(31 downto 0);
			  readOut_1       : out std_logic_vector(31 downto 0);
			  readOut_2       : out std_logic_vector(31 downto 0);
			  readOut_3       : out std_logic_vector(31 downto 0));
end ROM_fValues;

architecture behav of ROM_fValues is
type memory is array (0 to 74) of std_logic_vector(31 downto 0);
signal ROM : memory;
begin

	process(clk_i)
	variable state : integer := 0;
	begin
		if (rising_edge(clk_i)) then
			if (state = 0)  then
				
				readOut_0 <= (others => '0');
				readOut_1 <= (others => '0');
				readOut_2 <= (others => '0');
				readOut_3 <= (others => '0');
				state := 1;
				
				ROM(0) <= "00011010101001000100100110010001";
				ROM(1) <= "00010111000100101000101011001000";
				ROM(2) <= "00010100101100110111111100100001";
				ROM(3) <= "00010010110101101010101111100100";
				ROM(4) <= "00010001010000011000001110100111";
				ROM(5) <= "00001111110110001000110001011110";
				ROM(6) <= "00001110100011000010100011011101";
				ROM(7) <= "00001101010100100010010011001000";
				ROM(8) <= "00001100001000101110110111011010";
				ROM(9) <= "00001010111110000001011001000011";
				ROM(10) <= "00001001110010110100000010000111";
				ROM(11) <= "00001000100101001110111000111110";
				ROM(12) <= "00000111010010100111000101111010";
				ROM(13) <= "00000101110110001100001000010111";
				ROM(14) <= "00000100000100001001000011001001";
				
				ROM(15) <= "00100101101011010101011111001000";
				ROM(16) <= "00100011001111100110010001100010";
				ROM(17) <= "00100001101111010010111110100101";
				ROM(18) <= "00100000101000010001110010101010";
				ROM(19) <= "00011111101111011110111001001100";
				ROM(20) <= "00011110111111110111101111011110";
				ROM(21) <= "00011110010110101101001010011010";
				ROM(22) <= "00011101110010010101000000100111";
				ROM(23) <= "00011101010001101001111010110101";
				ROM(24) <= "00011100110011111011111110111001";
				ROM(25) <= "00011100011000101000101011000001";
				ROM(26) <= "00011011111111010110010000000110";
				ROM(27) <= "00011011100111110001000000011001";
				ROM(28) <= "00011011010001101001011111001110";
				ROM(29) <= "00011010111100110011010110111000";
				
				ROM(30) <= "00101110001001010001010110010001";
				ROM(31) <= "00101100001011100010101011000110";
				ROM(32) <= "00101010111111010101010010101001";
				ROM(33) <= "00101010000111111101001000111010";
				ROM(34) <= "00101001011100001101001000001011";
				ROM(35) <= "00101000110111111010100101111101";
				ROM(36) <= "00101000011000110101011110110010";
				ROM(37) <= "00100111111101100110111001011010";
				ROM(38) <= "00100111100101010110010010001010";
				ROM(39) <= "00100111001111011100101101110100";
				ROM(40) <= "00100110111011011110001110110011";
				ROM(41) <= "00100110101001000110000011001001";
				ROM(42) <= "00100110011000000100010010110111";
				ROM(43) <= "00100110001000001100100011111000";
				ROM(44) <= "00100101111001010100111101011110";
				
				ROM(45) <= "00110101010010001001001100100010";
				ROM(46) <= "00110011100101110110111000000001";
				ROM(47) <= "00110010100100110101011100100101";
				ROM(48) <= "00110001110101111001011011011101";
				ROM(49) <= "00110001010001000000100010011011";
				ROM(50) <= "00110000110010100010110110001010";
				ROM(51) <= "00110000011000100011011100010001";
				ROM(52) <= "00110000000001110111001010101010";
				ROM(53) <= "00101111101101101101001101100100";
				ROM(54) <= "00101111011011100100000011001111";
				ROM(55) <= "00101111001011000011101001000010";
				ROM(56) <= "00101110111011111010001001010111";
				ROM(57) <= "00101110101101111001111101011011";
				ROM(58) <= "00101110100000111000011101100110";
				ROM(59) <= "00101110010100101101001101000011";

				ROM(60) <= "00111011100100101010000001001110";
				ROM(61) <= "00111010000100000111100011000010";
				ROM(62) <= "00111001001010011101110011100111";
				ROM(63) <= "00111000100001000000001110101100";
				ROM(64) <= "00111000000000100000110100011010";
				ROM(65) <= "00110111100101101111101110000110";
				ROM(66) <= "00110111001110111101001100100100";
				ROM(67) <= "00110110111011000110000111110011";
				ROM(68) <= "00110110101001011110111101101011";
				ROM(69) <= "00110110011001101001110110101111";
				ROM(70) <= "00110110001011010001011001110000";
				ROM(71) <= "00110101111110000101101111111001";
				ROM(72) <= "00110101110001111010110011110000";
				ROM(73) <= "00110101100110100111001010001101";
				ROM(74) <= "00110101011100000011010011101100";

			elsif (state = 1) then
				
				readOut_0 <= ROM(To_integer(unsigned(address_0)));
				readOut_1 <= ROM(To_integer(unsigned(address_1)));
				readOut_2 <= ROM(To_integer(unsigned(address_2)));
				readOut_3 <= ROM(To_integer(unsigned(address_3)));
				
			else
				
				null;
				
			end if;
		end if;	
	
	end process;

end behav;